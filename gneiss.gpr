with "switches";

project Gneiss is

   type Platform_Type is ("linux", "genode");

   Platform : Platform_Type := external ("PLATFORM", "linux");
   Test := external ("TEST", "");
   Custom_Runtime := external ("RUNTIME", "componolit");

   Source := ("src", "src/common");
   Source_Platform := "src/platform";
   Source_Block := "src/block";
   Source_Block_Client := "src/block/client";
   Source_Block_Server := "src/block/server";
   Source_Log := "src/log";
   Source_Log_Client := "src/log/client";
   Source_Timer := "src/timer";
   Source_Timer_Client := "src/timer/client";
   Source_Rom := "src/rom";
   Source_Rom_Client := "src/rom/client";

   Linux_Source := Source &
                   (Source_Platform,
                    Source_Platform & "/linux",
                    Source_Block,
                    Source_Block & "/linux",
                    Source_Block_Client,
                    Source_Block_Client & "/linux",
                    Source_Log,
                    Source_Log & "/linux",
                    Source_Log_Client,
                    Source_Log_Client & "/linux",
                    Source_Timer,
                    Source_Timer & "/linux",
                    Source_Timer_Client,
                    Source_Timer_Client & "/linux",
                    Source_Rom,
                    Source_Rom & "/linux",
                    Source_Rom_Client,
                    Source_Rom_Client & "/linux");

   Genode_Source := Source &
                    (Source_Platform,
                     Source_Platform & "/genode",
                     Source_Block,
                     Source_Block & "/genode",
                     Source_Block_Client,
                     Source_Block_Client & "/genode",
                     Source_Block_Server,
                     Source_Block_Server & "/genode",
                     Source_Log,
                     Source_Log & "/genode",
                     Source_Log_Client,
                     Source_Log_Client & "/genode",
                     Source_Timer,
                     Source_Timer & "/genode",
                     Source_Timer_Client,
                     Source_Timer_Client & "/genode",
                     Source_Rom,
                     Source_Rom & "/genode",
                     Source_Rom_Client,
                     Source_Rom_Client & "/genode");

   for Create_Missing_Dirs use "True";
   for Object_Dir use "build";

   package Builder is
      for Global_Configuration_Pragmas use "spark.adc";
   end Builder;

   package Compiler is
      for Default_Switches ("Ada") use Switches.Compiler_Switches;
   end Compiler;

   package Linker is
      case Custom_Runtime is
         when "componolit" =>
            for Required_Switches use ("-L../ada-runtime/obj/lib", "-lposix_rts", "-lpthread", "-lrt");
         when others =>
            for Required_Switches use ("-lrt");
      end case;
   end Linker;

   case Custom_Runtime is
      when "componolit" =>
         for Runtime ("Ada") use "ada-runtime/obj";
      when others =>
         null;
   end case;

   case Test is
      when "" =>
         case Platform is
            when "linux" =>
               for Source_Dirs use Linux_Source;
               for Languages use ("Ada", "C");
            when "genode" =>
               for Source_Dirs use Genode_Source;
               for Languages use ("Ada");
         end case;
      when others =>
         case Platform is
            when "linux" =>
               for Source_Dirs use Linux_Source & ("test/" & Test);
               for Languages use ("Ada", "C");
               for Library_Name use "component_" & Test;
               for Library_Dir use "components";
               for Library_Kind use "dynamic";
               for Library_Options use ("-nostdlib", "-nostdinc", "-lgnat");
            when "genode" =>
               for Source_Dirs use Genode_Source & ("test/" & Test);
               for Languages use ("Ada");
         end case;
   end case;

end Gneiss;
