with "switches";

project Gneiss is

   type Platform_Type is ("linux", "genode");

   Platform : Platform_Type := external ("PLATFORM", "linux");
   Test := external ("TEST", "");
   Custom_Runtime := external ("RUNTIME", "componolit");

   Source := ("src", "src/common");
   Source_Platform := "src/platform";
   Source_Block := "src/block";
   Source_Block_Client := "src/block/client";
   Source_Block_Server := "src/block/server";
   Source_Log := "src/log";
   Source_Log_Client := "src/log/client";
   Source_Timer := "src/timer";
   Source_Timer_Client := "src/timer/client";
   Source_Rom := "src/rom";
   Source_Rom_Client := "src/rom/client";
   Source_Message := "src/message";
   Source_Message_Writer := "src/message/writer";
   Source_Message_Reader := "src/message/reader";

   Linux_Source := Source &
                   (Source_Platform,
                    Source_Platform & "/linux",
                    --  Source_Block,
                    --  Source_Block & "/linux",
                    --  Source_Block_Client,
                    --  Source_Block_Client & "/linux",
                    Source_Log,
                    Source_Log & "/linux",
                    Source_Log_Client,
                    Source_Log_Client & "/linux",
                    --  Source_Timer,
                    --  Source_Timer & "/linux",
                    --  Source_Timer_Client,
                    --  Source_Timer_Client & "/linux",
                    --  Source_Rom,
                    --  Source_Rom & "/linux",
                    --  Source_Rom_Client,
                    --  Source_Rom_Client & "/linux",
                    Source_Message,
                    Source_Message & "/linux",
                    Source_Message_Writer,
                    Source_Message_Writer & "/linux",
                    Source_Message_Reader,
                    Source_Message_Reader & "/linux");

   Genode_Source := Source &
                    (Source_Platform,
                     Source_Platform & "/genode",
                     Source_Block,
                     Source_Block & "/genode",
                     Source_Block_Client,
                     Source_Block_Client & "/genode",
                     Source_Block_Server,
                     Source_Block_Server & "/genode",
                     Source_Log,
                     Source_Log & "/genode",
                     Source_Log_Client,
                     Source_Log_Client & "/genode",
                     Source_Timer,
                     Source_Timer & "/genode",
                     Source_Timer_Client,
                     Source_Timer_Client & "/genode",
                     Source_Rom,
                     Source_Rom & "/genode",
                     Source_Rom_Client,
                     Source_Rom_Client & "/genode");

   for Create_Missing_Dirs use "True";

   Build_Dir := "build";

   package Builder is
      for Global_Configuration_Pragmas use "spark.adc";
   end Builder;

   package Compiler is
      for Default_Switches ("Ada") use Switches.Compiler_Switches;
   end Compiler;

   Runtime_Switches := ();
   Linux_Switches := ();

   case Custom_Runtime is
      when "componolit" =>
         Runtime_Switches := ("-lpthread", "-lrt");
      when others =>
         Runtime_Switches := ("-lrt");
   end case;

   case Custom_Runtime is
      when "componolit" =>
         for Runtime ("Ada") use "ada-runtime/obj";
      when others =>
         null;
   end case;

   case Test is
      when "" =>
         case Platform is
            when "linux" =>
               for Source_Dirs use Linux_Source;
               for Languages use ("Ada");
               Build_Dir := "build/linux";
            when "genode" =>
               for Source_Dirs use Genode_Source;
               for Languages use ("Ada");
               Build_Dir := "build/genode";
         end case;
      when "init" =>
         case Platform is
            when "linux" =>
               for Source_Dirs use (Source_Platform & "/linux",
                                    "/usr/include/libxml2");
               for Languages use ("C");
               Linux_Switches := ("-lxml2", "-ldl");
               Build_Dir := "build/init";
               for Main use ("init.c");
            when others =>
               null;
         end case;
      when others =>
         case Platform is
            when "linux" =>
               for Source_Dirs use Linux_Source & ("test/" & Test);
               for Languages use ("Ada", "C");
               for Excluded_Source_Files use ("component_main.c",
                                              "init.c",
                                              "config.c", "config.h",
                                              "list.c",
                                              "resources.c", "resources.h");
               for Library_Name use "component_" & Test;
               for Library_Dir use "build/libcomponents";
               for Library_Kind use "dynamic";
               for Library_Options use ("-L../../ada-runtime/obj/adalib",
                                        "-nostdlib",
                                        "-nostdinc",
                                        "-lgnat");
               for Library_Standalone use "encapsulated";
               for Library_Interface use ("component");
               Build_Dir := "build/linux";
            when "genode" =>
               for Source_Dirs use Genode_Source & ("test/" & Test);
               for Languages use ("Ada");
               Build_Dir := "build/genode";
         end case;
   end case;

   package Linker is
      for Required_Switches use Runtime_Switches & Linux_Switches;
   end Linker;

   for Object_Dir use Build_Dir;

end Gneiss;
